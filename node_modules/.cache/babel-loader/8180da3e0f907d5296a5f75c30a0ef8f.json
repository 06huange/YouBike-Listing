{"ast":null,"code":"var _jsxFileName = \"/Users/eagle/Desktop/youbike/src/YouBike.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function YouBike() {\n  _s();\n\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]); // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n\n  useEffect(() => {\n    fetch(\"http://localhost:8010/proxy/api/datasets/71CD1490-A2DF-4198-BEF1-318479775E8A/json/preview\").then(res => res.json()).then(result => {\n      setIsLoaded(true); //sort Array based on \"mday\"\n\n      var obj = result;\n      obj.sort((a, b) => b.mday - a.mday);\n      setItems(obj);\n    }, // Note: it's important to handle errors here\n    // instead of a catch() block so that we don't swallow\n    // exceptions from actual bugs in components.\n    error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 12\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 12\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"listing\",\n      children: items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          id: \"item\",\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: item.snaen\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Total: \", item.tot]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [\"Available: \", item.sbi]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: convertToDate(item.mday)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 45,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this)\n      }, item.sno, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this);\n  }\n} //convert number to Date Format\n\n_s(YouBike, \"m9AscAN57M/MODoTwSsNC5AuztA=\");\n\n_c = YouBike;\n\nfunction convertToDate(input) {\n  var year = (input / 10000000000).toFixed(0);\n  var month = (input / 100000000).toFixed(0) % 100;\n  var day = (input / 10000000).toFixed(0) % 10000;\n  var hour = (input / 10000 % 1000000).toFixed(0);\n  var min = (input / 100 % 100000000).toFixed(0);\n  var sec = (input % 10000000000).toFixed(0);\n  return year + \"/\" + month + \"/\" + day + \" - \" + hour + \":\" + min + \":\" + sec;\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"YouBike\");","map":{"version":3,"sources":["/Users/eagle/Desktop/youbike/src/YouBike.js"],"names":["React","useState","useEffect","YouBike","error","setError","isLoaded","setIsLoaded","items","setItems","fetch","then","res","json","result","obj","sort","a","b","mday","message","map","item","snaen","tot","sbi","convertToDate","sno","input","year","toFixed","month","day","hour","min","sec"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nexport default function YouBike() {\n    const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [items, setItems] = useState([]);\n\n  // Note: the empty deps array [] means\n  // this useEffect will run once\n  // similar to componentDidMount()\n  useEffect(() => {\n    fetch(\"http://localhost:8010/proxy/api/datasets/71CD1490-A2DF-4198-BEF1-318479775E8A/json/preview\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          setIsLoaded(true);\n          //sort Array based on \"mday\"\n          var obj = result;\n          obj.sort((a,b) => b.mday - a.mday);\n          setItems(obj);\n        },\n        // Note: it's important to handle errors here\n        // instead of a catch() block so that we don't swallow\n        // exceptions from actual bugs in components.\n        (error) => {\n          setIsLoaded(true);\n          setError(error);\n        }\n        )\n  }, [])\n\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  } else if (!isLoaded) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <ul id=\"listing\">\n        {items.map(item => (\n          <li key={item.sno}>\n            <ul id=\"item\">\n                <li>{item.snaen}</li>\n                <li>Total: {item.tot}</li>\n                <li>Available: {item.sbi}</li>\n                <li>{convertToDate(item.mday)}</li>\n            </ul>\n          </li>\n        ))}\n      </ul>\n    );\n  }\n}\n\n//convert number to Date Format\nfunction convertToDate(input){\n    var year = (input / 10000000000).toFixed(0);\n    var month = (input / 100000000).toFixed(0) % 100;\n    var day = (input / 10000000).toFixed(0) % 10000;\n\n    var hour = ((input / 10000) % 1000000).toFixed(0);\n    var min = ((input / 100) % 100000000).toFixed(0);\n    var sec = (input % 10000000000).toFixed(0);\n    return(year + \"/\" + month + \"/\" + day + \" - \" + hour + \":\" + min + \":\" + sec);\n}\n"]},"metadata":{},"sourceType":"module"}